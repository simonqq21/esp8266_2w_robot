let gateway=`ws://${window.location.hostname}/ws`;let websocket;let robotStatus={type:"status",lightState:false,beepState:false,lmotor_power:0,rmotor_power:0};let powerInc=2.5;let trimInc=.025;let turnSpdPercentage=.7;let defaultPower=160;let defaultTrim=0;let powerTrimChangeInterval;let powerTrimChangeTimeout;function initWebSocket(){websocket=new WebSocket(gateway);websocket.onopen=onOpen;websocket.onclose=onClose;websocket.onmessage=onMessage}function onOpen(e){requestStatus()}function requestStatus(){jsondata={command:"update"};websocket.send(jsondata);updateStatusIndicators()}function onClose(e){setTimeout(initWebSocket,2e3)}function onMessage(e){console.log(e.data);robotStatus=JSON.parse(e.data)}function updateStatusIndicators(){let e=$("#lights");let t=$("#beep");if(robotStatus.beepState){t.addClass("onbutton");t.removeClass("offbutton")}else{t.addClass("offbutton");t.removeClass("onbutton")}if(robotStatus.lightState){e.addClass("onbutton");e.removeClass("offbutton")}else{e.addClass("offbutton");e.removeClass("onbutton")}}$(document).ready(function(){getPowerValue();getTrimValue();updateStatusIndicators();if(isTouchEnabled()){for(element of $("input, button")){element.onmousedown="";element.onmouseup=""}}else{for(element of $("input, button")){element.ontouchstart="";element.ontouchend=""}}initWebSocket();setInterval(requestStatus,200)});function move(e,t){e.preventDefault();let o=getPowerValue();let r=getTrimValue();let a={type:"motors",lmotor_power:0,rmotor_power:0};switch(t){case"forward":console.log("trim = ",r);a.lmotor_power=o*(1+r);a.rmotor_power=o*(1-r);$("#forward").addClass("pressedbutton");console.log("forward");break;case"backward":a.lmotor_power=-o*(1+r);a.rmotor_power=-o*(1-r);$("#backward").addClass("pressedbutton");console.log("backward");break;case"left":a.lmotor_power=-turnSpdPercentage*o*(1+r);a.rmotor_power=turnSpdPercentage*o*(1-r);$("#left").addClass("pressedbutton");console.log("left");break;case"right":a.lmotor_power=turnSpdPercentage*o*(1+r);a.rmotor_power=-turnSpdPercentage*o*(1-r);$("#right").addClass("pressedbutton");console.log("right");break;case"brake":a.lmotor_power=-999;a.rmotor_power=-999;$("#brake").addClass("pressedbutton");console.log("brake");break;case"stop":default:$(".dpad_button").removeClass("pressedbutton");console.log("stop");break}console.log("motor json = ",JSON.stringify(a));websocket.send(JSON.stringify(a))}function setPower(e){$("#power").val(e);$("#power_display").text($("#power").val());console.log("power=",e)}function setTrim(e){$("#trim").val(e);$("#trim_display").text($("#trim").val());console.log("trim=",e)}function changePower(e){power=getPowerValue();power+=e;power=Math.min(power,255);power=Math.max(power,0);setPower(power)}function changeTrim(e){trim=getTrimValue();trim+=e;trim=Math.min(trim,1);trim=Math.max(trim,-1);setTrim(trim)}function getPowerValue(){let e=$("#power").val();e=parseInt(e);let t=$("#power_display");$("#power_display").text(e);return e}function getTrimValue(){let e=$("#trim").val();e=parseFloat(e);let t=$("#trim_display");$("#trim_display").text(e);return e}function holdPowerTrimButtons(e,t,o){e.preventDefault();switch(t){case"power":powerTrimChangeTimeout=setTimeout(function(){powerTrimChangeInterval=setInterval(changePower,50,o)},500);break;case"trim":powerTrimChangeTimeout=setTimeout(function(){powerTrimChangeInterval=setInterval(changeTrim,50,o)},500);break;default:}}function releasePowerTrimButtons(e){e.preventDefault();clearTimeout(powerTrimChangeTimeout);clearInterval(powerTrimChangeInterval)}function keyupHandler(e){let t=e.key;switch(t){case"h":case"H":toggleBeep(e,"off");break;default:move(e,"")}}function keydownHandler(e){let t=e.key;switch(t){case"w":case"W":console.log("forward");move(e,"forward");break;case"a":case"A":console.log("left");move(e,"left");break;case"s":case"S":console.log("backward");move(e,"backward");break;case"d":case"D":console.log("right");move(e,"right");break;case"-":console.log("power -");changePower(-powerInc);break;case"=":console.log("power +");changePower(powerInc);break;case"[":console.log("trim -");changeTrim(-trimInc);break;case"]":console.log("trim +");changeTrim(trimInc);break;case"l":case"L":console.log("lights toggle");toggleLights(e,"toggle");break;case"h":case"H":console.log("horn press");toggleBeep(e,"on");break;case" ":move(e,"brake");break;case"r":case"R":setPower(defaultPower);break;case"t":case"T":setTrim(defaultTrim);break;default:break}}function toggleLights(e,t){e.preventDefault();let o=false;switch(t){case"on":o=true;break;case"toggle":o=!robotStatus.lightState;break;default:break}let r={type:"lights",lights_state:o};websocket.send(JSON.stringify(r));updateStatusIndicators()}function toggleBeep(e,t){e.preventDefault();let o=false;switch(t){case"on":o=true;break;default:break}let r={type:"beep",horn_state:o};websocket.send(JSON.stringify(r));updateStatusIndicators()}function isTouchEnabled(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0}function isTouchInsideElement(e,t){const o=t.getBoundingClientRect();return e.touches[0].clientX>=o.left&&e.touches[0].clientX<=o.right&&e.touches[0].clientY>=o.top&&e.touches[0].clientY<=o.bottom}function stopOnTouchLeave(e){if(!isTouchInsideElement(e,e.target)){move(e,"")}}function stopHornOnTouchLeave(e){if(!isTouchInsideElement(e,e.target)){toggleBeep(e,"off")}}